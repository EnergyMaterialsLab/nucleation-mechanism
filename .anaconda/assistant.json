{"state":{"access":true,"terms":{"accepted":false,"version":null},"serverUrl":null,"notebooks":[{"path":"Untitled.ipynb","activeChatKey":null,"previousChatKey":null,"chats":{},"notebookState":{"dataframes":[{"cols":[["Time (s)","float64"],["Particle Number N(t)","float64"],["Nucleation Rate","float64"],["Aggregation Rate","float64"],["Ripening Rate","float64"],["Supersaturation S(t)","float64"]],"hash":"dde02aa0532cbaec1f0e4ab0770d360c8e3b10908376fa573c515b1941f98744","name":"df","type":"DataFrame","dtypesStr":"Time (s)                float64\\nParticle Number N(t)    float64\\nNucleation Rate         float64\\nAggregation Rate        float64\\nRipening Rate           float64\\nSupersaturation S(t)    float64\\ndtype: object"}],"selectedCell":null,"selectedText":{"text":"","cell":{"id":"5b4a226c-b6ad-4f28-af52-4a02856f0a37","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\nfrom scipy.special import erfc\nimport pandas as pd\n\n# ----------------------------\n# 상수 설정 (단위 명시 포함)\n# ----------------------------\nA = 1e3        # 핵생성 항 계수 [1/(um^2·s)]\nB = 178.9      # 핵생성 항 지수 계수 [무차원]\nK_rip = 1e-5   # 라이프닝 계수 [1/s]\nK_agg = 1e-28  # 응집 계수 [1/s]\nS0 = 50       # 초기 과포화도 [무차원]\n\n# ----------------------------\n# 과포화도 함수 S(t): erfc 기반 확산 지배\n# ----------------------------\ndef S(t):\n    A_erfc = 49    # 감소량 계수\n    B_erfc = 20     # 확산 깊이 계수\n    return np.maximum(S0 - A_erfc * erfc(B_erfc / np.sqrt(t)), 1.000001)\n\n# ----------------------------\n# 입자 수 변화율 dN/dt 정의\n# ----------------------------\ndef dNdt(t, N):\n    N_val = N[0] if isinstance(N, (list, np.ndarray)) else N\n    current_S = S(t)\n    logS = np.log(current_S)\n\n    # 각 항 계산\n    nucleation = A * np.exp(-B / (logS ** 2))\n    aggregation = 0 if N_val <= 0 else K_agg * N_val**2\n    ripening = 0 if N_val <= 0 else K_rip * N_val / (1 + K_rip * t)**2\n\n    dN_dt = nucleation - aggregation - ripening\n    return [dN_dt]\n\n# ----------------------------\n# 시뮬레이션 실행\n# ----------------------------\nN0 = [0]\nt_span = (1, 43200)  # t=0 대신 t=1부터 시작 (sqrt(0) 방지)\nt_eval = np.linspace(t_span[0], t_span[1], 43200)\n\nsol = solve_ivp(dNdt, t_span, N0, t_eval=t_eval, method='RK45', rtol=1e-6, atol=1e-9)\n\n# ----------------------------\n# 각 항 기여도 계산\n# ----------------------------\nnucleation_vals = []\naggregation_vals = []\nripening_vals = []\n\nfor t, N_val in zip(sol.t, sol.y[0]):\n    current_S = S(t)\n    logS = np.log(current_S)\n    nucleation = A * np.exp(-B / (logS ** 2))\n    aggregation = 0 if N_val <= 0 else K_agg * N_val**2\n    ripening = 0 if N_val <= 0 else K_rip * N_val / (1 + K_rip * t)**2\n\n    nucleation_vals.append(nucleation)\n    aggregation_vals.append(aggregation)\n    ripening_vals.append(ripening)\n\n# ----------------------------\n# 그래프 1: 입자 수 N(t)\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, sol.y[0], label='Population density N(t)', color='blue')\nplt.xlabel('Time (s)')\nplt.ylabel('Population density N(t)')\nplt.title('Change in Particle Density')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 그래프 2: 과포화도 S(t)\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, S(sol.t), label='Supersaturation S(t)', color='red')\nplt.xlabel('Time (s)')\nplt.ylabel('Supersaturation S(t)')\nplt.title('Supersaturation vs Time')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 그래프 3: 각 항의 변화율 개별 그래프\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, nucleation_vals, label='Nucleation Rate', color='green')\nplt.xlabel('Time (s)')\nplt.ylabel('Nucleation Rate (1/s)')\nplt.title('Nucleation Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, aggregation_vals, label='Aggregation Rate', color='orange')\nplt.xlabel('Time (s)')\nplt.ylabel('Aggregation Rate (1/s)')\nplt.title('Aggregation Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, ripening_vals, label='Ripening Rate', color='purple')\nplt.xlabel('Time (s)')\nplt.ylabel('Ripening Rate (1/s)')\nplt.title('Ripening Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\n# ----------------------------\n# 그래프 4: 각 항의 기여 스택플롯 (양/음 표시)\n# ----------------------------\nnucleation_arr = np.array(nucleation_vals)\naggregation_arr = -np.array(aggregation_vals)\nripening_arr = -np.array(ripening_vals)\n\nplt.figure(figsize=(10, 6))\nplt.stackplot(sol.t,\n              nucleation_arr,\n              aggregation_arr,\n              ripening_arr,\n              labels=['Nucleation (+)', 'Aggregation (–)', 'Ripening (–)'],\n              colors=['green', 'orange', 'purple'],\n              alpha=0.7)\nplt.axhline(0, color='black', linestyle='--')\nplt.xlabel('Time (s)')\nplt.ylabel('Rate Contribution (1/s)')\nplt.title('Signed Contributions to dN/dt (Stacked)')\nplt.legend(loc='upper right')\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 결과 저장\n# ----------------------------\ndf = pd.DataFrame({\n    'Time (s)': sol.t,\n    'Particle Number N(t)': sol.y[0],\n    'Nucleation Rate': nucleation_vals,\n    'Aggregation Rate': aggregation_vals,\n    'Ripening Rate': ripening_vals,\n    'Supersaturation S(t)': S(sol.t)\n})\ndf.to_excel('exsolution_result_detailed.xlsx', index=False)\n\n# ----------------------------\n# Google Colab 다운로드용 (옵션)\n# ----------------------------\ntry:\n    from google.colab import files\n    files.download('/content/exsolution_result_detailed.xlsx')\nexcept:\n    print(\"Colab 환경이 아니라면 다운로드는 생략됩니다.\")\n"}},"error":null},"homeScreen":{"chatStarters":{"categories":[{"id":"tutorial","label":"Get started","starters":[{"name":"load-volcano-data","label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"name":"plot-fibonacci","label":"Plot the first 100 Fibonacci numbers","instruction":"Plot the first 100 fibonacci numbers"},{"name":"mask-emails","label":"Create a function to mask emails","instruction":"Create a function to mask email addresses, show examples"}]},{"id":"dataframes","label":"Working with dataframes","starters":[{"name":"load-a-dataframe","label":"Load a DataFrame","suggestions":[{"label":"Generate a DataFrame with random data","instruction":"Generate code that creates a DataFrame with random data"},{"label":"Load 2023 NCAA Basketball Results","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/KenPomGamesCleaned.csv' and show the first 10 rows"},{"label":"Load 2023 NCAA Basketball Team Ratings","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/TeamRatings.csv' and show the first 10 rows"},{"label":"(FiveThirtyEight) Which US state has the worst drivers?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/bad-drivers/bad-drivers.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) Where do people go to check the weather?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/weather-check/weather-check.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) District Urbanization Index 2022","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/district-urbanization-index-2022/urbanization-index-2022.csv' and show the first 10 rows."},{"label":"Load the US Wind Turbine Database from usgs.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/5078f1cb198694274cb708253b0dc210/raw/f90167d071abe328f7f437f3d68dbd5deb6012c8/uswtdb_v5_3_20230113.csv"},{"label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"label":"Load US population estimates (2010-2019) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/e3dbe9bde709604252f291e1df92ffa7b3bd098f/nst-est2020.csv' and show the first 10 rows."},{"label":"Load US population estimates (2020-2022) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/f4602d2b9a17eb0d17355897264f4bad80c5528f/NST-EST2022-POPCHG2020_2022.csv' and show the first 10 rows."},{"label":"Load Pittsburgh bike-share rides data","instruction":"Generate a DataFrame from this url - 'https://gist.github.com/mattkram/16ff06942c100c00466ea5022567bdaa/raw/386da24f5ede4e70496cde1dc9e98c9d02bb177e/bikeshare.csv' and show the first 10 rows."}]},{"name":"describe-dataframe","label":"Describe the data in a DataFrame","doNotDisplay":false,"buttonLabel":"Describe Dataframe","contextSelectionRequired":true,"contextType":"describe-dataframe"},{"name":"graph-dataframe","label":"Generate a graph for data in a DataFrame","doNotDisplay":false,"buttonLabel":"Get Code","contextSelectionRequired":true,"contextType":"graph-dataframe"},{"name":"data-cleaning-suggestions","label":"Suggestions for cleaning data","doNotDisplay":false,"buttonLabel":"Generate cleaning suggestions","contextSelectionRequired":true,"suggestionsType":"data-cleaning-suggestions","generateSuggestions":true},{"name":"dataframe-suggestions","label":"More suggestions...","doNotDisplay":false,"buttonLabel":"Generate suggestions","contextSelectionRequired":true,"suggestionsType":"dataframe-suggestions","generateSuggestions":true}]}]},"selectedChatStarter":null},"suggestionState":{"loading":false,"suggestions":null,"dataframe":null,"error":null}},{"path":"README.ipynb","activeChatKey":null,"previousChatKey":null,"chats":{},"notebookState":{"dataframes":[],"selectedCell":null,"selectedText":{"text":"","cell":{"id":"d18b3eb8-1b1b-40b2-8966-b91bc533fc3d","source":""}},"error":null},"homeScreen":{"chatStarters":{"categories":[{"id":"tutorial","label":"Get started","starters":[{"name":"load-volcano-data","label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"name":"plot-fibonacci","label":"Plot the first 100 Fibonacci numbers","instruction":"Plot the first 100 fibonacci numbers"},{"name":"mask-emails","label":"Create a function to mask emails","instruction":"Create a function to mask email addresses, show examples"}]},{"id":"dataframes","label":"Working with dataframes","starters":[{"name":"load-a-dataframe","label":"Load a DataFrame","suggestions":[{"label":"Generate a DataFrame with random data","instruction":"Generate code that creates a DataFrame with random data"},{"label":"Load 2023 NCAA Basketball Results","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/KenPomGamesCleaned.csv' and show the first 10 rows"},{"label":"Load 2023 NCAA Basketball Team Ratings","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/TeamRatings.csv' and show the first 10 rows"},{"label":"(FiveThirtyEight) Which US state has the worst drivers?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/bad-drivers/bad-drivers.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) Where do people go to check the weather?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/weather-check/weather-check.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) District Urbanization Index 2022","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/district-urbanization-index-2022/urbanization-index-2022.csv' and show the first 10 rows."},{"label":"Load the US Wind Turbine Database from usgs.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/5078f1cb198694274cb708253b0dc210/raw/f90167d071abe328f7f437f3d68dbd5deb6012c8/uswtdb_v5_3_20230113.csv"},{"label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"label":"Load US population estimates (2010-2019) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/e3dbe9bde709604252f291e1df92ffa7b3bd098f/nst-est2020.csv' and show the first 10 rows."},{"label":"Load US population estimates (2020-2022) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/f4602d2b9a17eb0d17355897264f4bad80c5528f/NST-EST2022-POPCHG2020_2022.csv' and show the first 10 rows."},{"label":"Load Pittsburgh bike-share rides data","instruction":"Generate a DataFrame from this url - 'https://gist.github.com/mattkram/16ff06942c100c00466ea5022567bdaa/raw/386da24f5ede4e70496cde1dc9e98c9d02bb177e/bikeshare.csv' and show the first 10 rows."}]},{"name":"describe-dataframe","label":"Describe the data in a DataFrame","doNotDisplay":true,"buttonLabel":"Describe Dataframe","contextSelectionRequired":true,"contextType":"describe-dataframe"},{"name":"graph-dataframe","label":"Generate a graph for data in a DataFrame","doNotDisplay":true,"buttonLabel":"Get Code","contextSelectionRequired":true,"contextType":"graph-dataframe"},{"name":"data-cleaning-suggestions","label":"Suggestions for cleaning data","doNotDisplay":true,"buttonLabel":"Generate cleaning suggestions","contextSelectionRequired":true,"suggestionsType":"data-cleaning-suggestions","generateSuggestions":true},{"name":"dataframe-suggestions","label":"More suggestions...","doNotDisplay":true,"buttonLabel":"Generate suggestions","contextSelectionRequired":true,"suggestionsType":"dataframe-suggestions","generateSuggestions":true}]}]},"selectedChatStarter":null},"suggestionState":{"loading":false,"suggestions":null,"dataframe":null,"error":null}},{"path":"nucleation.ipynb","activeChatKey":null,"previousChatKey":null,"chats":{},"notebookState":{"dataframes":[{"cols":[["Time (s)","float64"],["Particle Number N(t)","float64"],["Nucleation Rate","float64"],["Aggregation Rate","float64"],["Ripening Rate","float64"],["Supersaturation S(t)","float64"]],"hash":"dde02aa0532cbaec1f0e4ab0770d360c8e3b10908376fa573c515b1941f98744","name":"df","type":"DataFrame","dtypesStr":"Time (s)                float64\\nParticle Number N(t)    float64\\nNucleation Rate         float64\\nAggregation Rate        float64\\nRipening Rate           float64\\nSupersaturation S(t)    float64\\ndtype: object"}],"selectedCell":null,"selectedText":{"text":"","cell":{"id":"5b4a226c-b6ad-4f28-af52-4a02856f0a37","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\nfrom scipy.special import erfc\nimport pandas as pd\n\n# ----------------------------\n# 상수 설정 (단위 명시 포함)\n# ----------------------------\nA = 1e3        # 핵생성 항 계수 [1/(um^2·s)]\nB = 178.9      # 핵생성 항 지수 계수 [무차원]\nK_rip = 1e-5   # 라이프닝 계수 [1/s]\nK_agg = 1e-28  # 응집 계수 [1/s]\nS0 = 50       # 초기 과포화도 [무차원]\n\n# ----------------------------\n# 과포화도 함수 S(t): erfc 기반 확산 지배\n# ----------------------------\ndef S(t):\n    A_erfc = 49    # 감소량 계수\n    B_erfc = 20     # 확산 깊이 계수\n    return np.maximum(S0 - A_erfc * erfc(B_erfc / np.sqrt(t)), 1.000001)\n\n# ----------------------------\n# 입자 수 변화율 dN/dt 정의\n# ----------------------------\ndef dNdt(t, N):\n    N_val = N[0] if isinstance(N, (list, np.ndarray)) else N\n    current_S = S(t)\n    logS = np.log(current_S)\n\n    # 각 항 계산\n    nucleation = A * np.exp(-B / (logS ** 2))\n    aggregation = 0 if N_val <= 0 else K_agg * N_val**2\n    ripening = 0 if N_val <= 0 else K_rip * N_val / (1 + K_rip * t)**2\n\n    dN_dt = nucleation - aggregation - ripening\n    return [dN_dt]\n\n# ----------------------------\n# 시뮬레이션 실행\n# ----------------------------\nN0 = [0]\nt_span = (1, 43200)  # t=0 대신 t=1부터 시작 (sqrt(0) 방지)\nt_eval = np.linspace(t_span[0], t_span[1], 43200)\n\nsol = solve_ivp(dNdt, t_span, N0, t_eval=t_eval, method='RK45', rtol=1e-6, atol=1e-9)\n\n# ----------------------------\n# 각 항 기여도 계산\n# ----------------------------\nnucleation_vals = []\naggregation_vals = []\nripening_vals = []\n\nfor t, N_val in zip(sol.t, sol.y[0]):\n    current_S = S(t)\n    logS = np.log(current_S)\n    nucleation = A * np.exp(-B / (logS ** 2))\n    aggregation = 0 if N_val <= 0 else K_agg * N_val**2\n    ripening = 0 if N_val <= 0 else K_rip * N_val / (1 + K_rip * t)**2\n\n    nucleation_vals.append(nucleation)\n    aggregation_vals.append(aggregation)\n    ripening_vals.append(ripening)\n\n# ----------------------------\n# 그래프 1: 입자 수 N(t)\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, sol.y[0], label='Population density N(t)', color='blue')\nplt.xlabel('Time (s)')\nplt.ylabel('Population density N(t)')\nplt.title('Change in Particle Density')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 그래프 2: 과포화도 S(t)\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, S(sol.t), label='Supersaturation S(t)', color='red')\nplt.xlabel('Time (s)')\nplt.ylabel('Supersaturation S(t)')\nplt.title('Supersaturation vs Time')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 그래프 3: 각 항의 변화율 개별 그래프\n# ----------------------------\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, nucleation_vals, label='Nucleation Rate', color='green')\nplt.xlabel('Time (s)')\nplt.ylabel('Nucleation Rate (1/s)')\nplt.title('Nucleation Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, aggregation_vals, label='Aggregation Rate', color='orange')\nplt.xlabel('Time (s)')\nplt.ylabel('Aggregation Rate (1/s)')\nplt.title('Aggregation Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(10, 6))\nplt.plot(sol.t, ripening_vals, label='Ripening Rate', color='purple')\nplt.xlabel('Time (s)')\nplt.ylabel('Ripening Rate (1/s)')\nplt.title('Ripening Term Contribution')\nplt.grid(True)\nplt.legend()\nplt.show()\n\n# ----------------------------\n# 그래프 4: 각 항의 기여 스택플롯 (양/음 표시)\n# ----------------------------\nnucleation_arr = np.array(nucleation_vals)\naggregation_arr = -np.array(aggregation_vals)\nripening_arr = -np.array(ripening_vals)\n\nplt.figure(figsize=(10, 6))\nplt.stackplot(sol.t,\n              nucleation_arr,\n              aggregation_arr,\n              ripening_arr,\n              labels=['Nucleation (+)', 'Aggregation (–)', 'Ripening (–)'],\n              colors=['green', 'orange', 'purple'],\n              alpha=0.7)\nplt.axhline(0, color='black', linestyle='--')\nplt.xlabel('Time (s)')\nplt.ylabel('Rate Contribution (1/s)')\nplt.title('Signed Contributions to dN/dt (Stacked)')\nplt.legend(loc='upper right')\nplt.grid(True)\nplt.show()\n\n# ----------------------------\n# 결과 저장\n# ----------------------------\ndf = pd.DataFrame({\n    'Time (s)': sol.t,\n    'Particle Number N(t)': sol.y[0],\n    'Nucleation Rate': nucleation_vals,\n    'Aggregation Rate': aggregation_vals,\n    'Ripening Rate': ripening_vals,\n    'Supersaturation S(t)': S(sol.t)\n})\ndf.to_excel('exsolution_result_detailed.xlsx', index=False)\n\n# ----------------------------\n# Google Colab 다운로드용 (옵션)\n# ----------------------------\ntry:\n    from google.colab import files\n    files.download('/content/exsolution_result_detailed.xlsx')\nexcept:\n    print(\"Colab 환경이 아니라면 다운로드는 생략됩니다.\")\n"}},"error":null},"homeScreen":{"chatStarters":{"categories":[{"id":"tutorial","label":"Get started","starters":[{"name":"load-volcano-data","label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"name":"plot-fibonacci","label":"Plot the first 100 Fibonacci numbers","instruction":"Plot the first 100 fibonacci numbers"},{"name":"mask-emails","label":"Create a function to mask emails","instruction":"Create a function to mask email addresses, show examples"}]},{"id":"dataframes","label":"Working with dataframes","starters":[{"name":"load-a-dataframe","label":"Load a DataFrame","suggestions":[{"label":"Generate a DataFrame with random data","instruction":"Generate code that creates a DataFrame with random data"},{"label":"Load 2023 NCAA Basketball Results","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/KenPomGamesCleaned.csv' and show the first 10 rows"},{"label":"Load 2023 NCAA Basketball Team Ratings","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/bbwieland/ncaa-projections/main/data/TeamRatings.csv' and show the first 10 rows"},{"label":"(FiveThirtyEight) Which US state has the worst drivers?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/bad-drivers/bad-drivers.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) Where do people go to check the weather?","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/weather-check/weather-check.csv' and show the first 10 rows."},{"label":"(FiveThirtyEight) District Urbanization Index 2022","instruction":"Generate a DataFrame from this url - 'https://raw.githubusercontent.com/fivethirtyeight/data/master/district-urbanization-index-2022/urbanization-index-2022.csv' and show the first 10 rows."},{"label":"Load the US Wind Turbine Database from usgs.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/5078f1cb198694274cb708253b0dc210/raw/f90167d071abe328f7f437f3d68dbd5deb6012c8/uswtdb_v5_3_20230113.csv"},{"label":"Load volcano data from the Smithsonian Institute","instruction":"Load 'https://gist.githubusercontent.com/mattkram/9684863843254402942dfede27af2cb7/raw/2590dd8185b833aacf247c0595edbb07a025a6d7/Smithsonian_VOTW_Holocene_Volcanoes.csv' in a code block. Use `pd.read_csv` and show the first 10 rows"},{"label":"Load US population estimates (2010-2019) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/e3dbe9bde709604252f291e1df92ffa7b3bd098f/nst-est2020.csv' and show the first 10 rows."},{"label":"Load US population estimates (2020-2022) from census.gov","instruction":"Generate a DataFrame from this url - 'https://gist.githubusercontent.com/mattkram/d3880a3a23ca36ccf10f22c1f49adb29/raw/f4602d2b9a17eb0d17355897264f4bad80c5528f/NST-EST2022-POPCHG2020_2022.csv' and show the first 10 rows."},{"label":"Load Pittsburgh bike-share rides data","instruction":"Generate a DataFrame from this url - 'https://gist.github.com/mattkram/16ff06942c100c00466ea5022567bdaa/raw/386da24f5ede4e70496cde1dc9e98c9d02bb177e/bikeshare.csv' and show the first 10 rows."}]},{"name":"describe-dataframe","label":"Describe the data in a DataFrame","doNotDisplay":false,"buttonLabel":"Describe Dataframe","contextSelectionRequired":true,"contextType":"describe-dataframe"},{"name":"graph-dataframe","label":"Generate a graph for data in a DataFrame","doNotDisplay":false,"buttonLabel":"Get Code","contextSelectionRequired":true,"contextType":"graph-dataframe"},{"name":"data-cleaning-suggestions","label":"Suggestions for cleaning data","doNotDisplay":false,"buttonLabel":"Generate cleaning suggestions","contextSelectionRequired":true,"suggestionsType":"data-cleaning-suggestions","generateSuggestions":true},{"name":"dataframe-suggestions","label":"More suggestions...","doNotDisplay":false,"buttonLabel":"Generate suggestions","contextSelectionRequired":true,"suggestionsType":"dataframe-suggestions","generateSuggestions":true}]}]},"selectedChatStarter":null},"suggestionState":{"loading":false,"suggestions":null,"dataframe":null,"error":null}}],"path":"nucleation.ipynb","settings":{"enableDataCollection":false,"open":false,"addCodeToNotebook":null},"user":"0ef25bb7-293c-4b29-a634-b20f88fbae61","account":{"user":{"id":"0ef25bb7-293c-4b29-a634-b20f88fbae61","email":"unidao3678@gmail.com","first_name":"요한","last_name":"김","country":null,"state":null,"promotional_content":null,"company":null,"company_size":null,"position":null,"industry":null,"username":null,"created_at":"2025-06-05T02:02:49.600798Z","updated_at":null,"partner_id":null,"partner_customer_id":null,"external_id":null,"first_home_visit":true},"profile":{"is_confirmed":true,"is_disabled":false,"is_consented":true},"subscriptions":[],"metadata":{"is_starter_tier":false,"is_pro_tier":false}},"menuOpen":false,"attachContextOpen":false,"summarizedFiles":{},"hidePopups":false},"version":11}